;;; Compiled snippets and support files for `c++-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'c++-mode
                     '(("tppdir" "/*\n   Vladimir Feinberg\n   `(first (last (split-string (buffer-file-name) \"/\") 2))`/`(file-name-nondirectory (buffer-file-name))`\n   `(format-time-string \"%Y-%m-%d\"))`\n\n   ${1:comment}\n*/" "tppdir" nil nil nil nil "direct-keybinding" nil)
                       ("tempc" "template<class ${1:T}>" "template-class" nil nil nil nil "direct-keybinding" nil)
                       ("tempt" "template<typename ${1:T}>" "template" nil nil nil nil nil nil)
                       ("ns" "namespace ${1:ns} {\n\n$0\n\n}  // namespace $1\n" "namespace" nil nil nil nil "direct-keybinding" nil)
                       ("ifdef" "#ifdef $1\n#endif /* $1 */" "ifdef" nil nil nil nil "direct-keybinding" nil)
                       ("ghpp" "#ifndef `(replace-regexp-in-string \"\\\\.\" \"_\" (upcase (mapconcat 'identity ((lambda (path) (last path (- (length path) (+ (position \"google3\" path :test #'equal) 1)))) (split-string (buffer-file-name) \"/\")) \"_\")))`_\n#define `(replace-regexp-in-string \"\\\\.\" \"_\" (upcase (mapconcat 'identity ((lambda (path) (last path (- (length path) (+ (position \"google3\" path :test #'equal) 1)))) (split-string (buffer-file-name) \"/\")) \"_\")))`_\n\nnamespace `((lambda (path) (nth (+ (position \"google3\" path :test #'equal) 1) path)) (split-string (buffer-file-name) \"/\"))` {\nnamespace `((lambda (path) (nth (+ (position \"google3\" path :test #'equal) 2) path)) (split-string (buffer-file-name) \"/\"))` {\nnamespace `((lambda (path) (nth (+ (position \"google3\" path :test #'equal) 3) path)) (split-string (buffer-file-name) \"/\"))` {\n\n$0\n\n}  // namespace `((lambda (path) (nth (+ (position \"google3\" path :test #'equal) 3) path)) (split-string (buffer-file-name) \"/\"))`\n}  // namespace `((lambda (path) (nth (+ (position \"google3\" path :test #'equal) 2) path)) (split-string (buffer-file-name) \"/\"))`\n}  // namespace `((lambda (path) (nth (+ (position \"google3\" path :test #'equal) 1) path)) (split-string (buffer-file-name) \"/\"))`\n\n#endif  // `(replace-regexp-in-string \"\\\\.\" \"_\" (upcase (mapconcat 'identity ((lambda (path) (last path (- (length path) (+ (position \"google3\" path :test #'equal) 1)))) (split-string (buffer-file-name) \"/\")) \"_\")))`_\n" "ghpp" nil nil nil nil "direct-keybinding" nil)
                       ("gcpp" "#include \"`(replace-regexp-in-string \"\\\\.cc\" \".h\" (mapconcat 'identity ((lambda (path) (last path (- (length path) (+ (position \"google3\" path :test #'equal) 1)))) (split-string (buffer-file-name) \"/\")) \"/\"))`\"\n\nnamespace `((lambda (path) (nth (+ (position \"google3\" path :test #'equal) 1) path)) (split-string (buffer-file-name) \"/\"))` {\nnamespace `((lambda (path) (nth (+ (position \"google3\" path :test #'equal) 2) path)) (split-string (buffer-file-name) \"/\"))` {\nnamespace `((lambda (path) (nth (+ (position \"google3\" path :test #'equal) 3) path)) (split-string (buffer-file-name) \"/\"))` {\n\n$0\n\n}  // namespace `((lambda (path) (nth (+ (position \"google3\" path :test #'equal) 3) path)) (split-string (buffer-file-name) \"/\"))`\n}  // namespace `((lambda (path) (nth (+ (position \"google3\" path :test #'equal) 2) path)) (split-string (buffer-file-name) \"/\"))`\n}  // namespace `((lambda (path) (nth (+ (position \"google3\" path :test #'equal) 1) path)) (split-string (buffer-file-name) \"/\"))`\n\n" "gcpp" nil nil nil nil "direct-keybinding" nil)
                       ("forit" "for (${1:auto} it = ${2:vec}.begin(); it != $2.end(); ++it) {\n  $0\n}" "forit" nil nil nil nil "direct-keybinding" nil)
                       ("fori" "for (${1:int} i = 0; i < ${2:vec}.size(); ++i) {\n  $0\n}" "fori" nil nil nil nil "direct-keybinding" nil)
                       ("cref" "const ${1:T}& " "cref" nil nil nil nil "direct-keybinding" nil)
                       ("_yas-parents" "cc-mode" "_yas-parents" nil nil nil nil nil nil)))


;;; Do not edit! File generated at Tue Jun 13 15:07:06 2017
