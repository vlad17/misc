#!/bin/bash -ex
#
# The post-receive hook to install in the remote repo.
# Install this using init-build-dir.sh

COMPILER=ccache_gcc
CLEAN=none
TEST=true
PARALLEL=$(grep -c processor /proc/cpuinfo)
BUILDER=make
BUILD_TYPE=

read old_value new_value ref_name

echo "received $old_value..$new_value for $ref_name"

if [[ "$ref_name" =~ refs/heads/test(%.+) ]]; then
  flags=$(echo "${BASH_REMATCH[1]}" | tr "%" " ")
  for flag in $flags ; do
    if [[ "$flag" =~ (.+)=(.+) ]]; then
      opt=${BASH_REMATCH[1]}
      val=${BASH_REMATCH[2]}

      var=$(echo "$opt" | tr a-z A-Z)

      eval "${var}=\$val"
    else
      echo bad flag: $flag
      echo expected 'key=value' format
    fi
  done
fi

case $BUILD_TYPE in
    debug)
        flags="-DCMAKE_BUILD_TYPE=debug -DKUDU_USE_ASAN=0 -DKUDU_USE_TSAN=0"
        ;;
    asan)
        COMPILER=clang
        flags="-DCMAKE_BUILD_TYPE=debug -DKUDU_USE_ASAN=1 -DKUDU_USE_TSAN=0"
        ;;
    tsan)
        COMPILER=clang
        flags="-DCMAKE_BUILD_TYPE=debug -DKUDU_USE_ASAN=0 -DKUDU_USE_TSAN=1"
        ;;
    release)
        flags="-DCMAKE_BUILD_TYPE=release -DKUDU_USE_ASAN=0 -DKUDU_USE_TSAN=0"
        ;;
    client)
        flags="-DCMAKE_BUILD_TYPE=debug -DKUDU_EXPORTED_CLIENT=1"
        ;;
esac

cd $GIT_DIR/..
unset GIT_DIR

ROOT=$(pwd)
export PATH=$ROOT/thirdparty/installed/bin:$PATH

case $COMPILER in
  gcc)
    ;;
  clang)
    # from kudu/thirdparty/build-thirdparty.sh
    CLANG=$(which clang || :)
    CLANGXX=$(which clang++ || :)
    if [ -n "$CLANG" -a -n "$CLANGXX" -a -z "$CC" -a -z "$CXX" ]; then
      echo "found clang:"
      echo "  CLANG=${CLANG}"
      echo "  CLANGXX=${CLANGXX}"
      export CC=$CLANG
      export CXX=$CLANGXX
    else 
      echo "could not find clang"
    fi
    ;;
  ccache_gcc)
    export CC="/usr/lib64/ccache/gcc"
    export CXX="/usr/lib64/ccache/g++"
    ;;
  *)
    echo bad compiler: $COMPILER
esac

case $BUILDER in
  make)
    export MYMAKE="make -j$PARALLEL"
    ;;
  ninja)
    export MYMAKE="ninja"
    ;;
  *)
    echo bad builder: $BUILDER
    exit 1
esac

git checkout -f $new_value
MAKE_CLEAN=false
case $CLEAN in
  none)
    ;;
  cmake)
    rm -Rf CMakeCache.txt CMakeFiles
    ;;
  make)
    rm -Rf CMakeCache.txt CMakeFiles
    MAKE_CLEAN=true
    ;;
  git)
    git clean -xdf
    ;;
  *)
    echo unknown clean type: $CLEAN
    echo 'options: none|cmake|make|git'
esac

if [ -n "$BUILD_TYPE" ]; then
    rm -Rf CMakeCache.txt CMakeFiles
    cmake . $flags
fi

thirdparty/build-if-necessary.sh

if $MAKE_CLEAN; then
  $MYMAKE clean
fi

TARGETS=$(echo "$TARGETS" | sed -e 's,;, ,g;')

if $COMPILE_ALL ; then
  $MYMAKE
else
  for t in $TARGETS ; do
    case $BUILDER in
      make)
        pushd src/$t
        $MYMAKE
        popd
        ;;
      ninja)
        $MYMAKE $t
        ;;
    esac
  done
fi

if $TEST ; then
  if [ -z "$TARGETS" ]; then
    ctest -j$PARALLEL
  else
    for t in $TARGETS ; do
      echo testing $t
      pushd src/$t
      ctest -j$PARALLEL
      popd
    done
  fi
fi
